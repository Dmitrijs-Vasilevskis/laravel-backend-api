scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

extend type Query {
    getUser(
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User! @find

    users(name: String @where(operator: "like")): [User!]!
        @paginate(defaultCount: 10)
}

type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    password: String
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
}

extend type Mutation {
    registerCustomer(input: RegisterCustomerInput!): AuthPayload!
        @field(resolver: "App\\GraphQL\\Mutations\\RegisterCustomer")
    loginCustomer(input: LoginCustomerInput!): AuthPayload!
        @field(resolver: "App\\GraphQL\\Mutations\\LoginCustomer")
}

input RegisterCustomerInput {
    firstName: String!
    lastName: String!
    email: String!
    password: String!
}

input LoginCustomerInput {
    email: String!
    password: String!
}

type AuthPayload {
    token: String!
    user: User!
}
